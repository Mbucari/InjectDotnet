using InjectDotnet.Native;
using System;

namespace InjectDotnet.Debug;

public interface IException
{
	/// <summary>
	/// The address where the exception occurred.
	/// </summary>
	nint Address { get; }
	/// <summary>
	/// Gets or sets a value indicating whether the <see cref="Debugger"/> has handled this exception.
	/// </summary>
	bool Handled { get; set; }
	/// <summary>
	/// A value that indicates whether the debugger has previously encountered the
	/// exception specified by the <see cref="ExceptionRecord"/> member. If <see cref="true"/>,
	/// this is the first time the debugger has encountered the exception. Debuggers typically
	/// handle breakpoint and single-step exceptions when they are first encountered.<br/>
	/// If <see cref="false"/>, he debugger has previously encountered the exception. This
	/// occurs only if, during the search for structured exception handlers, either no handler
	/// was found or the exception was continued.
	/// </summary>
	bool FirstChance { get; }
}

/// <summary>
/// Provides exception information for the <see cref="Debugger.Exception"/> event.
/// </summary>
public class ExceptionEventArgs : ContinuableDebuggerEventArgs, IException
{
	/// <summary>
	/// An <see cref="Debug.ExceptionRecord"/> structure with information specific to
	/// the exception. This includes the exception code, flags, address, a
	/// pointer to a related exception, extra parameters, and so on.
	/// </summary>
	public ExceptionRecord ExceptionRecord { get; }
	public bool Handled { get; set; }
	public bool FirstChance { get; }
	public nint Address { get; }

	internal ExceptionEventArgs(IMemoryReader memoryReader, DebugEvent debugEvent)
		: base(debugEvent)
	{
		FirstChance = debugEvent.u.Exception.dwFirstChance != 0;
		ExceptionRecord = new ExceptionRecord(memoryReader, debugEvent.u.Exception.ExceptionRecord);
		Address = debugEvent.u.Exception.ExceptionRecord.ExceptionAddress;
	}
}

/// <summary>
/// Describes an exception.
/// </summary>
public class ExceptionRecord
{
	/// <summary>
	/// The reason the exception occurred. This is the code generated by a hardware exception,
	/// or the code specified in the RaiseException function for a software-generated exception.
	/// </summary>
	public ExceptionCode Code { get; }
	/// <summary>
	/// exception flags
	/// </summary>
	public ExceptionRecordFlags Flags { get; }
	/// <summary>
	/// The address where the exception occurred.
	/// </summary>
	public nint Address { get; }
	/// <summary>
	/// An array of additional arguments that describe the exception.
	/// The RaiseException function can specify this array of arguments.
	/// </summary>
	/// <remarks>
	///  For most exception codes, the array elements are undefined. The following table describes the exception codes whose array elements are defined.
	///  <list type="table">
	///		<item>
	///			<term>EXCEPTION_ACCESS_VIOLATION</term>
	///			<description>
	///			 The first element of the array contains a read-write flag that indicates the type of operation that caused the access violation. If this value is zero, the thread attempted to read the inaccessible data. If this value is 1, the thread attempted to write to an inaccessible address. 
	///			 If this value is 8, the thread caused a user-mode data execution prevention (DEP) violation.
	///			 <br/>The second array element specifies the virtual address of the inaccessible data.
	///			</description>
	///		</item>
	///		<item>
	///			<term>EXCEPTION_IN_PAGE_ERROR</term>
	///			<description>
	///			 The first element of the array contains a read-write flag that indicates the type of operation that caused the access violation. If this value is zero, the thread attempted to read the inaccessible data. If this value is 1, the thread attempted to write to an inaccessible address. 
	///			 If this value is 8, the thread caused a user-mode data execution prevention (DEP) violation.
	///			 <br/>The second array element specifies the virtual address of the inaccessible data.
	///			 <br/>The third array element specifies the underlying NTSTATUS code that resulted in the exception.
	///			</description>
	///		</item>
	///  </list>
	///  </remarks>
	public nint[] Parameters { get; }
	/// <summary>
	/// A pointer to an associated <see cref="ExceptionRecord"/>. Exception records can be
	/// chained together to provide additional information when nested exceptions occur.
	/// </summary>
	public ExceptionRecord? InnerException { get; }
	internal ExceptionRecord(IMemoryReader memoryReader, EXCEPTION_RECORD record)
	{
		Code = record.ExceptionCode;
		Flags = record.ExceptionFlags;
		Address = record.ExceptionAddress;
		Parameters = new nint[record.NumberParameters];
		Array.Copy(record.ExceptionRecords, Parameters, record.NumberParameters);

		if (record.HasInnerException)
			InnerException = new ExceptionRecord(memoryReader, record.GetInnerException(memoryReader));
	}
}
